{"version":3,"sources":["components/Console/Console.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","terminal","width","padding","backgroundColor","marginBottom","spacing","borderRadius","commandInput","display","justifyContent","commandTextField","sendButton","margin","red","termOptions","fontSize","fontFamily","foreground","background","cursor","black","green","yellow","blue","magenta","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightMagenta","brightCyan","brightWhite","Console","fitAddon","FitAddon","classes","termRef","React","token","setToken","tokenDialogOpen","setTokenDialogOpen","tokenInputValue","setTokenInputValue","connOpen","setConnOpen","commandInputValue","setCommandInputValue","webSocketOnMessage","data","res","JSON","parse","type","msg","current","writeln","connect","clear","Promise","resolve","axios","get","then","content","forEach","value","log","catch","err","response","status","getManagerLog","window","websocketConn","WebSocket","location","host","onclose","onmessage","onopen","send","stringify","fit","ref","className","addons","options","TextField","label","variant","onChange","e","target","Button","color","onClick","cmd","close","Dialog","open","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","autoFocus","fullWidth","DialogActions","root","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","drawerPaper","drawerHeader","alignItems","mixins","toolbar","flexGrow","contentShift","easeOut","App","setOpen","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","aria-label","edge","Typography","noWrap","Drawer","anchor","paper","Divider","List","ListItem","button","key","ListItemIcon","ListItemText","primary","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a756adf0.chunk.js","sourcesContent":["import * as React from 'react'\nimport { XTerm } from 'xterm-for-react'\nimport { FitAddon } from 'xterm-addon-fit'\nimport { ITerminalOptions, ITheme } from 'xterm'\nimport axios from 'axios'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContentText from '@material-ui/core/DialogContentText'\n\nimport { Response, WebSocketResponse } from '../../API/response'\nimport { Log } from '../../API/log'\n\ndeclare global {\n  interface Window {\n    websocketConn: WebSocket | null\n  }\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    terminal: {\n      width: '100%',\n      padding: 12,\n      backgroundColor: '#2b2b2b',\n      marginBottom: theme.spacing(2),\n      borderRadius: 4,\n    },\n    commandInput: {\n      display: 'flex',\n      justifyContent: 'center',\n    },\n    commandTextField: {\n      width: '85vw',\n    },\n    sendButton: {\n      margin: 8,\n    },\n  })\n)\n\nconst red = '\\x1B[1;3;31m'\nconst end = '\\x1B[0m'\n\nconst termOptions = {\n  fontSize: 16,\n  fontFamily:\n    'Menlo For Powerline,Consolas,Liberation Mono,Menlo,Courier,monospace',\n  theme: {\n    foreground: '#d2d2d2',\n    background: '#2b2b2b',\n    cursor: '#adadad',\n    black: '#000000',\n    red: '#d81e00',\n    green: '#5ea702',\n    yellow: '#cfae00',\n    blue: '#427ab3',\n    magenta: '#89658e',\n    cyan: '#00a7aa',\n    white: '#dbded8',\n    brightBlack: '#686a66',\n    brightRed: '#f54235',\n    brightGreen: '#99e343',\n    brightYellow: '#fdeb61',\n    brightBlue: '#84b0d8',\n    brightMagenta: '#bc94b7',\n    brightCyan: '#37e6e8',\n    brightWhite: '#f1f1f0',\n  } as ITheme,\n} as ITerminalOptions\n\nconst Console: React.FC = () => {\n  const fitAddon = new FitAddon()\n  const classes = useStyles()\n  const termRef = React.useRef<XTerm>(null)\n  const [token, setToken] = React.useState('')\n  const [tokenDialogOpen, setTokenDialogOpen] = React.useState(false)\n  const [tokenInputValue, setTokenInputValue] = React.useState('')\n  const [connOpen, setConnOpen] = React.useState(false)\n  const [commandInputValue, setCommandInputValue] = React.useState('')\n\n  const getManagerLog = (token: string) => {\n    return new Promise(resolve => {\n      axios\n        .get<Response<Log[]>>(`/api/log/all?token=${token}`)\n        .then(res => {\n          res.data.content.forEach(value =>\n            termRef.current?.terminal.writeln(\n              `${red}${value.type}: ${end}${value.log}`\n            )\n          )\n          resolve()\n        })\n        .catch(err => {\n          termRef.current?.terminal.writeln('Connection failed')\n          if (err.response.status === 401) {\n            termRef.current?.terminal.writeln(err.response.data.msg)\n            termRef.current?.terminal.writeln('Please enter token.')\n            setTokenDialogOpen(true)\n          } else {\n            termRef.current?.terminal.writeln('Connection lost.')\n            termRef.current?.terminal.writeln(\n              'Unknown error:' + err.response.data.msg + err.response.status\n            )\n            termRef.current?.terminal.writeln('Please contact the developer.')\n          }\n        })\n    })\n  }\n\n  const webSocketOnMessage = (data: any) => {\n    const res: WebSocketResponse = JSON.parse(data.data)\n    switch (res.type) {\n      case 'auth':\n        if (res.msg === 'OK') {\n          termRef.current?.terminal.writeln('Connection succeeded.')\n        } else {\n          termRef.current?.terminal.writeln(res.msg)\n          termRef.current?.terminal.writeln('Please enter token.')\n          setTokenDialogOpen(true)\n        }\n        break\n      case 'cmd_in':\n        termRef.current?.terminal.writeln(`${red}${res.type}: ${end}${res.msg}`)\n        break\n      case 'bds':\n        termRef.current?.terminal.writeln(`${red}${res.type}: ${end}${res.msg}`)\n        break\n    }\n  }\n\n  const connect = React.useCallback((token: string) => {\n    termRef.current?.terminal.clear()\n    termRef.current?.terminal.writeln('Connecting to PoiManager...')\n    getManagerLog(token).then(() => {\n      window.websocketConn = new WebSocket(\n        `ws://${window.location.host}/api/ws/cmd`\n      )\n      setConnOpen(true)\n      window.websocketConn.onclose = () => {\n        setConnOpen(false)\n        termRef.current?.terminal.writeln('Connection lost.')\n      }\n      window.websocketConn.onmessage = webSocketOnMessage\n      window.websocketConn.onopen = () => {\n        window.websocketConn?.send(JSON.stringify({ token }))\n      }\n    })\n  }, [])\n\n  const sendCommand = () => {\n    window.websocketConn?.send(\n      JSON.stringify({ token, cmd: commandInputValue })\n    )\n    setCommandInputValue('')\n  }\n\n  React.useEffect(() => {\n    fitAddon.fit()\n  }, [fitAddon])\n\n  React.useEffect(() => {\n    connect(token)\n  }, [connect, token])\n\n  return (\n    <React.Fragment>\n      <div>\n        <XTerm\n          ref={termRef}\n          className={classes.terminal}\n          addons={[fitAddon]}\n          options={termOptions}\n        />\n        <div className={classes.commandInput}>\n          <TextField\n            label='在此输入指令'\n            variant='outlined'\n            className={classes.commandTextField}\n            value={commandInputValue}\n            onChange={e => setCommandInputValue(e.target.value)}\n          />\n          <Button\n            variant='contained'\n            color='primary'\n            className={classes.sendButton}\n            onClick={sendCommand}>\n            执行\n          </Button>\n\n          {connOpen ? (\n            <Button\n              variant='contained'\n              color='primary'\n              className={classes.sendButton}\n              onClick={() => {\n                window.websocketConn?.close()\n                setConnOpen(false)\n              }}>\n              中断\n            </Button>\n          ) : (\n            <Button\n              variant='contained'\n              color='primary'\n              className={classes.sendButton}\n              onClick={() => {\n                connect(token)\n              }}>\n              连接\n            </Button>\n          )}\n        </div>\n      </div>\n      <Dialog open={tokenDialogOpen} aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>请输入 Token</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            请您输入 Token ，在程序启动时能找到{' '}\n            <code> >Manager Token: xxxxxx</code>的字样，您输入\n            <code>Manager Token: </code>后的文本即可\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin='dense'\n            id='token'\n            label='Token'\n            type='text'\n            onChange={e => setTokenInputValue(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              setTokenDialogOpen(false)\n            }}\n            color='primary'>\n            取消\n          </Button>\n          <Button\n            onClick={() => {\n              setToken(tokenInputValue)\n              setTokenDialogOpen(false)\n            }}\n            color='primary'>\n            确定\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  )\n}\n\nexport default Console\n","import * as React from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport Drawer from '@material-ui/core/Drawer'\nimport Divider from '@material-ui/core/Divider'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\n\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\n\nimport Console from './components/Console/Console'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      marginLeft: 240,\n      width: `calc(100% - 240px)`,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: 36,\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: 240,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: 240,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -240,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n  })\n)\n\nconst App: React.FC = () => {\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position='fixed'\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={()=>setOpen(true)}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant='h6' noWrap>\n            PoiManager\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n       className={classes.drawer}\n       variant=\"persistent\"\n       anchor=\"left\"\n       open={open}\n       classes={{\n         paper: classes.drawerPaper,\n       }}\n        >\n        <div className={classes.drawerHeader}>\n          <IconButton\n            onClick={() => {\n              setOpen(false)\n            }}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key='console'>\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary='控制台' />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Console />\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}